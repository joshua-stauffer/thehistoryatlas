schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type AccountsGenericResponse
  @join__type(graph: API)
{
  token: String!
  user_details: UserDetails!
}

input AnnotateCitationInput
  @join__type(graph: WRITEMODEL)
{
  citation: String!
  citationGuid: String!
  summary: String!
  summaryGuid: String!
  meta: MetaDataInput!
  summaryTags: [TagInput!]!
  token: String!
}

type Citation
  @join__type(graph: API)
{
  guid: String!
  text: String!
  meta: MetaData!
}

type CitationByGUID
  @join__type(graph: API)
{
  citation_guid: String
}

type Coords
  @join__type(graph: API)
{
  latitude: Float
  longitude: Float
  geoshape: String
}

input CredentialsInput
  @join__type(graph: API)
{
  username: String!
  password: String!
}

type EntitySummary
  @join__type(graph: API)
{
  type: EntityType!
  guid: String!
  citation_count: Int!
  names: [String!]!
  first_citation_date: String!
  last_citation_date: String!
}

enum EntityType
  @join__type(graph: API)
  @join__type(graph: WRITEMODEL)
{
  TIME
  PERSON
  PLACE
}

type FuzzySearchResponse
  @join__type(graph: API)
{
  name: String!
  guids: [String]!
}

type GeoResponse
  @join__type(graph: API)
{
  longitude: Float
  latitude: Float
  geoshape: String
}

type GUIDSummaries
  @join__type(graph: API)
{
  guids: [String]
  summaries: [GUIDSummary]
}

type GUIDSummary
  @join__type(graph: API)
{
  type: String
  guid: String
  citation_count: Int
  names: [String]
  first_citation_date: String
  last_citation_date: String
}

type IsUsernameUniqueResponse
  @join__type(graph: API)
{
  username: String!
  is_unique: Boolean!
}

scalar join__FieldSet

enum join__Graph {
  API @join__graph(name: "api", url: "http://api:4000/")
  WRITEMODEL @join__graph(name: "writemodel", url: "http://writemodel:8800/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LoginResponse
  @join__type(graph: API)
{
  success: Boolean!
  token: String
}

type Manifest
  @join__type(graph: API)
{
  guid: String!
  citation_guids: [String]
  timeline: [Timeline]!
}

type MetaData
  @join__type(graph: API)
{
  title: String!
  author: String!
  publisher: String!
  pubDate: String
  pageNum: Int
}

input MetaDataInput
  @join__type(graph: WRITEMODEL)
{
  GUID: String!
  author: String!
  pageNum: Int!
  pubDate: String!
  publisher: String!
  title: String!
}

type Mutation
  @join__type(graph: API)
  @join__type(graph: WRITEMODEL)
{
  ConfirmAccount(token: String!): AccountsGenericResponse! @join__field(graph: API)
  DeactivateAccount(token: String!, username: String!): AccountsGenericResponse @join__field(graph: API)
  UpdateUser(token: String!, user_details: UpdateUserDetailsInput!, credentials: CredentialsInput): AccountsGenericResponse! @join__field(graph: API)
  AddUser(token: String!, user_details: NewUserDetailsInput!): AccountsGenericResponse! @join__field(graph: API)
  Login(username: String!, password: String!): LoginResponse! @join__field(graph: API)
  PublishNewCitation(Annotation: AnnotateCitationInput!): PublishCitationResponse! @join__field(graph: WRITEMODEL)
}

interface MutationResponse
  @join__type(graph: WRITEMODEL)
{
  success: Boolean!
  message: Boolean
}

input NewUserDetailsInput
  @join__type(graph: API)
{
  f_name: String!
  l_name: String!
  username: String!
  password: String!
  email: String!
}

type PlaceByCoordsResponse
  @join__type(graph: API)
{
  latitude: Float!
  longitude: Float!
  guid: String
}

type PublishCitationResponse implements MutationResponse
  @join__implements(graph: WRITEMODEL, interface: "MutationResponse")
  @join__type(graph: WRITEMODEL)
{
  success: Boolean!
  message: Boolean
}

type Query
  @join__type(graph: API)
  @join__type(graph: WRITEMODEL)
{
  GetSummariesByGUID(summary_guids: [String!]!): [Summary] @join__field(graph: API)
  GetEntitySummariesByGUID(guids: [String!]!): [EntitySummary]! @join__field(graph: API)
  GetCitationByGUID(citationGUID: String!): Citation @join__field(graph: API)
  GetManifest(entityType: EntityType!, GUID: String!): Manifest! @join__field(graph: API)
  GetGUIDsByName(name: String!): GUIDSummaries! @join__field(graph: API)
  GetCoordinatesByName(name: String!): [GeoResponse] @join__field(graph: API)
  GetFuzzySearchByName(name: String!): [FuzzySearchResponse] @join__field(graph: API)
  GetTextAnalysis(text: String!): TextAnalysisResponse @join__field(graph: API)
  IsUsernameUnique(username: String!): IsUsernameUniqueResponse! @join__field(graph: API)
  GetUser(token: String!): AccountsGenericResponse! @join__field(graph: API)
  GetPlaceByCoords(latitude: Float!, longitude: Float!): PlaceByCoordsResponse! @join__field(graph: API)
  status: String! @join__field(graph: WRITEMODEL)
}

type Summary
  @join__type(graph: API)
{
  guid: String!
  text: String!
  tags: [Tag!]!
  citation_guids: [String!]!
}

type Tag
  @join__type(graph: API)
{
  tag_type: EntityType!
  tag_guid: String!
  start_char: Int!
  stop_char: Int!
  name: String
  names: [String]
  coords: Coords
}

input TagInput
  @join__type(graph: WRITEMODEL)
{
  GUID: String!
  name: String!
  startChar: Int!
  stopChar: Int!
  type: EntityType!
  geoshape: String = null
  latitude: Float = null
  longitude: Float = null
}

type TextAnalysis
  @join__type(graph: API)
{
  text: String
  start_char: Int
  stop_char: Int
  guids: [String]
  coords: [GeoResponse]
}

type TextAnalysisResponse
  @join__type(graph: API)
{
  text: String
  text_map: TextMap
  boundaries: [TextBoundaries]
}

type TextBoundaries
  @join__type(graph: API)
{
  text: String
  start_char: Int
  stop_char: Int
}

type TextMap
  @join__type(graph: API)
{
  PERSON: [TextAnalysis]
  PLACE: [TextAnalysis]
  TIME: [TextAnalysis]
}

type Timeline
  @join__type(graph: API)
{
  year: Int!
  count: Int!
  root_guid: String!
}

input UpdateUserDetailsInput
  @join__type(graph: API)
{
  f_name: String
  l_name: String
  username: String
  password: String
  email: String
}

type UserDetails
  @join__type(graph: API)
{
  f_name: String!
  l_name: String!
  username: String!
  email: String!
  last_login: String!
}