

The History Atlas - a quick reference for public APIs across the project


______________________________________________________________________________
OVERVIEW
Communication across the History Atlas happens through messages passed using
the AMQP protocol. 

______________________________________________________________________________
RabbitMQ config details

  vhosts:
    /

  exchanges:
    main (topic)

  Generic message shape:
    type: string
    payload: {}

  Topics are organized as:
    <message_type>.<message_qualifier?>.<specific_message_recipient?>


______________________________________________________________________________
Message Types


  Command - JSON object capturing a users intent. It's collected in the client,
            assembled in the API, and processed in the WriteModel.
  valid types:
      PUBLISH_NEW_CITATION

..............................................................................



  Event - JSON object created from a validated Command. Considered emitted (and 
          provisional) upon creation in the Write Model, and become persisted 
          (and permanent) in the Event Store. Serve as the single source of
          truth across the application, and are generally accessible through
          the History Player service for building/rebuilding local state.
  valid types:
      CITATION_ADDED
      META_ADDED
      PERSON_ADDED
      PLACE_ADDED
      TIME_ADDED
      PERSON_TAGGED
      PLACE_TAGGED
      TIME_TAGGED

..............................................................................



  Query - JSON objects requesting information from another service - an 
          asynchronous RPC. These messages must include a correlation_id
          and a reply_to, and any responses should be directed to the
          queue reply_to and include the correlation_id.

        
______________________________________________________________________________
Topics and the message shapes they expect


    command.writemodel # change this to command?
      publishers:
        API
      consumers:
        WriteModel

      {
        type: PUBLISH_NEW_CITATION
        user: string
        timestamp: string
        payload: {
          text: string
          tags: {}[]
          meta: {}
        }
      }

EXAMPLES:

..............................................................................

    event.emitted
      publishers:
        WriteModel
      consumers:
        EventStore

      {
        type: EVENT_TRANSACTION
        user: string
        timestamp: string
        app_version: string
        payload: [
          <chron-ordered list of synthetic events>
        ]
      }

..............................................................................

    event.persisted
      publishers:
        EventStore
      consumers:
        ReadModel
        WriteModel
        GeoService?

      {
        type: CITATION_ADDED
        transaction_guid:   string
        app_version:        string
        user:               string
        timestamp:          string
        event_id:           int
        payload: {
          text:             string
          tags:             string[]
          meta:             string
        }
      }

      {
        type: META_ADDED
        transaction_guid:   string
        app_version:        string
        user:               string
        timestamp:          string
        event_id:           int
        payload: {
          meta_guid:        string
          citation_guid:    string
          author:           string
          publisher:        string
          title:            string
          pub_date?:        string
          page_num?:        int
          url?:             string
        }
      }

      {
        type: PERSON_ADDED
        transaction_guid:   string
        app_version:        string
        user:               string
        timestamp:          string
        event_id:           int
        payload: {
          citation_guid:    string
          person_guid:      string
          person_name:      string
          citation_start:   int
          citation_end:     int
        }
      }

      {
        type: PLACE_ADDED
        transaction_guid:   string
        app_version:        string
        user:               string
        timestamp:          string
        event_id:           int
        payload: {
          citation_guid:    string
          place_guid:       string
          place_name:       string
          citation_start:   int
          citation_end:     int
          latitude:         float
          longitude:        float
        }
      }

      {
        type: TIME_ADDED
        transaction_guid:   string
        app_version:        string
        user:               string
        timestamp:          string
        event_id:           int
        payload: {
          citation_guid:    string
          time_guid:        string
          time_name:        string
          citation_start:   int
          citation_end:     int         
        }
      }

      {
        type: PERSON_TAGGED
        transaction_guid:   string
        app_version:        string
        user:               string
        timestamp:          string
        event_id:           int
        payload: {
          citation_guid:    string
          person_guid:      string
          person_name:      string
          citation_start:   int
          citation_end:     int
        }
      }

      {
        type: PLACE_TAGGED
        transaction_guid:   string
        app_version:        string
        user:               string
        timestamp:          string
        event_id:           int
        payload: {
          citation_guid:    string
          place_guid:       string
          place_name:       string
          citation_start:   int
          citation_end:     int
        }
      }

      {
        type: TIME_TAGGED
        transaction_guid:   string
        app_version:        string
        user:               string
        timestamp:          string
        event_id:           int
        payload: {
          citation_guid:    string
          time_guid:        string
          time_name:        string
          citation_start:   int
          citation_end:     int         
        }
      }

  

EXAMPLES:

..............................................................................

    event.replay.request
      publishers:
        ReadModel
        WriteModel
      consumers:
        History

        {
          *correlation_id
          type: REQUEST_HISTORY_REPLAY
          payload:{
            last_event_id: int
          }
        }
        =>

..............................................................................

    event.replay.*  
      writemodel | readmodel
      // note: each consumer should describe their own namespace and pass it to 
      // History when requesting a replay.
      publishers:
        History
      consumers:
        WriteModel
        ReadModel

        {
          *correlation_id
          type: <event_type>
          payload: {event}
        }
        ...
        {
          type: HISTORY_REPLAY_END
        }

..............................................................................

    query.readmodel
      publishers:
        API
        NLP
      consumers:
        ReadModel

        {
          type: GET_CITATIONS_BY_GUID
          payload: {
            citation_guids: str[]
          }
        }
        =>
        {
          type: CITATIONS_BY_GUID
          payload: {
            citations: 
              citation_guid: {
                text: str
                meta: {
                  title: str
                  author: str
                  publisher: str
                  other fields?
                }
                tags: {
                  star_char: int
                  stop_char: int
                  tag_type: enum PERSON | PLACE | TIME
                  tag_guid: str
                  name?: str          # TIME only
                  names?: str[]       # PLACE and PERSON
                  coords?: {          # PLACE only
                    latitude: float
                    longitude: float
                    geoshape?: str
                    }
                }[]
              }
            
              ||

              {
                error: citation guid does not exist
              }
            }
        }

        {
          type: GET_MANIFEST
          payload: {
            type: enum PERSON | PLACE | TIME,
            guid: str
          }
        }
        =>
        {
          type: MANIFEST
          payload: {
            guid: str
            citation_guids: str[]
          }
        }

        {
          type: GET_GUIDS_BY_NAME
          payload: {
            name: str
          }
        }
        =>
        {
          type: GUID_BY_NAME
          payload: {
            guids: str[]
          }
        }

..............................................................................

  query.nlp
    publishers:
      API
    consumers:
      NLP

      {
        type: PROCESS_TEXT
        payload: {
          text: str
        }
      }
      =>
      {
        type: TEXT_PROCESSED
        payload: {
          text: str
          text_map: {
            ENTITY_TYPE: {
              text: str
              start_char: int
              stop_char: int
              guids: str[]
              coords?: {
                latitude: float
                longitude: float
                geoshape: str
              }[]
            }
          }
        }
      }

  EXAMPLE: 
{"type": "PROCESS_TEXT", "payload": {"text": "Thus it was that on the day following Oculi Sunday, four weeks before Easter, Sebastian Nagel and his colleague Ambrosius Bach, Together with the ducal forester Johann George Koch, arrayed themselves around the ancient baptismal font inside St. George's, Eisenach's main church."}}
RESPONSE
{"type": "TEXT_PROCESSED", 
"payload": 
{"text_map": 
{"PERSON": 
[{"char_start": 78, "char_stop": 87, "text": "Sebastian", "guids": []}, 
{"char_start": 88, "char_stop": 93, "text": "Nagel", "guids": []}, 
{"char_start": 112, "char_stop": 121, "text": "Ambrosius", "guids": []}, 
{"char_start": 122, "char_stop": 126, "text": "Bach", "guids": []}, 
{"char_start": 161, "char_stop": 167, "text": "Johann", "guids": []}, 
{"char_start": 168, "char_stop": 174, "text": "George", "guids": []}, 
{"char_start": 175, "char_stop": 179, "text": "Koch", "guids": []}, 
{"char_start": 245, "char_stop": 251, "text": "George", "guids": []}, 
{"char_start": 251, "char_stop": 253, "text": "'s", "guids": []}, 
{"char_start": 255, "char_stop": 263, "text": "Eisenach", "guids": ["36c0eef2-3d64-438f-a768-36b608bfc690"]}, 
{"char_start": 263, "char_stop": 265, "text": "'s", "guids": []}], "PLACE": [], "TIME": [], "coords": "test test test"}, 
"text": "Thus it was that on the day following Oculi Sunday, four weeks before Easter, Sebastian Nagel and his colleague Ambrosius Bach, Together with the ducal forester Johann George Koch, arrayed themselves around the ancient baptismal font inside St. George's, Eisenach's main church."}}..............................................................................

  query.geo
    publishers:
      NLP
    consumers:
      GEO

      {
        type: GET_COORDS_BY_NAME_BATCH
        payload: {
          names: str[]
        }
      }
      => 
      {
        type: COORDS_BY_NAME_BATCH
        payload: {
          names: { 
            name: str
            coord: str 
          }[]
        }
      }
{"type": "COORDS_BY_NAME_BATCH", "payload": {"names": "test test test"}}
..............................................................................

  query.geo
  publishers:
    nlp
    api
  consumers:
    geo

  {
    type: GET_COORDS_BY_NAME
    payload: {
      name: str
    }
  }
  =>
  {
    type: COORDS_BY_NAME
    payload: {
      str as name: {
        latitude: float
        longitude: float
      } 
    }
  }

  {
    type: GET_COORDS_BY_NAME_BATCH
    payload: {
      names: str[]
    }
  }
  =>
  {
    type: COORDS_BY_NAME_BATCH
    payload: {
      str as name: {
        latitude: float
        longitude: float
      } 
    }
  }


# EXAMPLES
{"type": "GET_COORDS_BY_NAME", "payload": {"name": "Rome"}}
..............................................................................

  # direct queues

    (api)
      // api creates its own queues on the fly and passes them to recipients
      // as the reply_to field in the AMQP message properties.
      publishers:
        any
      consumers:
        api

    {
      type: COMMAND_SUCCESS
    }
    {
      type: COMMAND_FAILED
      payload: {
        reason: string
        existing_event_guid: string
      }
    }

