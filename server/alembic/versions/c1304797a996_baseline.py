"""baseline

Revision ID: c1304797a996
Revises:
Create Date: 2025-04-14 17:51:10.651426

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "c1304797a996"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "names",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "sources",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("title", sa.VARCHAR(), nullable=False),
        sa.Column("author", sa.VARCHAR(), nullable=False),
        sa.Column("publisher", sa.VARCHAR(), nullable=False),
        sa.Column("pub_date", sa.VARCHAR(), nullable=True),
        sa.Column("kwargs", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "summaries",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("text", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("text"),
    )
    op.create_index(
        "idx_summaries_text",
        "summaries",
        ["text"],
        unique=False,
        postgresql_using="hash",
    )
    op.create_table(
        "tags",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("type", sa.VARCHAR(), nullable=True),
        sa.Column("wikidata_id", sa.VARCHAR(), nullable=True),
        sa.Column("wikidata_url", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("wikidata_id"),
        sa.UniqueConstraint("wikidata_url"),
    )
    op.create_index(
        "idx_tags_wikidata_id",
        "tags",
        ["wikidata_id"],
        unique=False,
        postgresql_where=sa.text("wikidata_id IS NOT NULL"),
    )
    op.create_table(
        "citations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("text", sa.VARCHAR(), nullable=True),
        sa.Column("source_id", sa.UUID(), nullable=True),
        sa.Column("summary_id", sa.UUID(), nullable=True),
        sa.Column("page_num", sa.INTEGER(), nullable=True),
        sa.Column("access_date", sa.VARCHAR(), nullable=True),
        sa.Column("wikidata_item_id", sa.VARCHAR(), nullable=True),
        sa.Column("wikidata_item_title", sa.VARCHAR(), nullable=True),
        sa.Column("wikidata_item_url", sa.VARCHAR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["sources.id"],
        ),
        sa.ForeignKeyConstraint(
            ["summary_id"],
            ["summaries.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_citations_summary_id", "citations", ["summary_id"], unique=False
    )
    op.create_table(
        "people",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["tags.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "places",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("latitude", sa.FLOAT(), nullable=True),
        sa.Column("longitude", sa.FLOAT(), nullable=True),
        sa.Column("geoshape", sa.VARCHAR(), nullable=True),
        sa.Column("geonames_id", sa.INTEGER(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["tags.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_places_coordinates",
        "places",
        ["latitude", "longitude"],
        unique=False,
        postgresql_where=sa.text("latitude IS NOT NULL AND longitude IS NOT NULL"),
    )
    op.create_index(op.f("ix_places_latitude"), "places", ["latitude"], unique=False)
    op.create_index(op.f("ix_places_longitude"), "places", ["longitude"], unique=False)
    op.create_table(
        "story_names",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("tag_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=False),
        sa.Column("lang", sa.VARCHAR(), nullable=False),
        sa.Column("description", sa.VARCHAR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tags.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tag_instances",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("start_char", sa.INTEGER(), nullable=True),
        sa.Column("stop_char", sa.INTEGER(), nullable=True),
        sa.Column("summary_id", sa.UUID(), nullable=True),
        sa.Column("tag_id", sa.UUID(), nullable=True),
        sa.Column("story_order", sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(
            ["summary_id"],
            ["summaries.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tags.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("story_order", "tag_id", name="uq_story_order"),
    )
    op.create_index(
        "idx_tag_instances_tag_id_story_order",
        "tag_instances",
        ["tag_id", "story_order"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tag_instances_tag_id"),
        "tag_instances",
        ["tag_id"],
        unique=False,
    )
    op.create_table(
        "tag_names",
        sa.Column("tag_id", sa.UUID(), nullable=False),
        sa.Column("name_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["name_id"],
            ["names.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tags.id"],
        ),
        sa.UniqueConstraint("tag_id", "name_id"),
    )
    op.create_index(
        "idx_tag_names_composite",
        "tag_names",
        ["tag_id", "name_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tag_names_name_id"), "tag_names", ["name_id"], unique=False
    )
    op.create_index(op.f("ix_tag_names_tag_id"), "tag_names", ["tag_id"], unique=False)
    op.create_table(
        "times",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("datetime", sa.VARCHAR(), nullable=True),
        sa.Column("calendar_model", sa.String(length=64), nullable=True),
        sa.Column("precision", sa.INTEGER(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["tags.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_times_datetime", "times", ["datetime"], unique=False)
    op.create_index(
        "idx_times_lookup",
        "times",
        ["datetime", "calendar_model", "precision"],
        unique=False,
    )
    op.create_index(op.f("ix_times_datetime"), "times", ["datetime"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.VARCHAR(), nullable=False),
        sa.Column("email", sa.VARCHAR(), nullable=True),
        sa.Column("f_name", sa.VARCHAR(), nullable=True),
        sa.Column("l_name", sa.VARCHAR(), nullable=True),
        sa.Column("username", sa.VARCHAR(), nullable=True),
        sa.Column("password", sa.VARCHAR(), nullable=True),
        sa.Column("type", sa.VARCHAR(), nullable=True),
        sa.Column("last_login", sa.VARCHAR(), nullable=True),
        sa.Column("deactivated", sa.BOOLEAN(), nullable=True),
        sa.Column("confirmed", sa.BOOLEAN(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users")
    op.drop_index(op.f("ix_times_datetime"), table_name="times")
    op.drop_index("idx_times_lookup", table_name="times")
    op.drop_index("idx_times_datetime", table_name="times")
    op.drop_table("times")
    op.drop_index(op.f("ix_tag_names_tag_id"), table_name="tag_names")
    op.drop_index(op.f("ix_tag_names_name_id"), table_name="tag_names")
    op.drop_index("idx_tag_names_composite", table_name="tag_names")
    op.drop_table("tag_names")
    op.drop_index(op.f("ix_tag_instances_tag_id"), table_name="tag_instances")
    op.drop_index("idx_tag_instances_tag_id_story_order", table_name="tag_instances")
    op.drop_table("tag_instances")
    op.drop_table("story_names")
    op.drop_index(op.f("ix_places_longitude"), table_name="places")
    op.drop_index(op.f("ix_places_latitude"), table_name="places")
    op.drop_index(
        "idx_places_coordinates",
        table_name="places",
        postgresql_where=sa.text("latitude IS NOT NULL AND longitude IS NOT NULL"),
    )
    op.drop_table("places")
    op.drop_table("people")
    op.drop_index("idx_citations_summary_id", table_name="citations")
    op.drop_table("citations")
    op.drop_index(
        "idx_tags_wikidata_id",
        table_name="tags",
        postgresql_where=sa.text("wikidata_id IS NOT NULL"),
    )
    op.drop_table("tags")
    op.drop_index("idx_summaries_text", table_name="summaries", postgresql_using="hash")
    op.drop_table("summaries")
    op.drop_table("sources")
    op.drop_table("names")
    # ### end Alembic commands ###
